The Open/Closed Principle states that software entities (classes, modules, functions, etc.)  
should be open for extension but closed for modification. In other words:

Open for extension: You can add new functionality or behavior to a system.

Closed for modification: You don’t need to change the existing, already-working code to do so.

This principle aims to reduce the risk of introducing bugs when adding new features, as modifying
existing code can unintentionally break things that were previously working fine.

public class ShapeCalculator {
    public double calculateArea(Object shape) {
        if (shape instanceof Circle) {
            Circle circle = (Circle) shape;
            return Math.PI * circle.getRadius() * circle.getRadius();
        } else if (shape instanceof Rectangle) {
            Rectangle rectangle = (Rectangle) shape;
            return rectangle.getWidth() * rectangle.getHeight();
        }
        return 0; // Default case
    }
}

class Circle {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }
}

class Rectangle {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    public double getWidth() {
        return width;
    }

    public double getHeight() {
        return height;
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        ShapeCalculator calculator = new ShapeCalculator();
        Circle circle = new Circle(5);
        Rectangle rectangle = new Rectangle(4, 6);

        System.out.println("Circle Area: " + calculator.calculateArea(circle));
        System.out.println("Rectangle Area: " + calculator.calculateArea(rectangle));
    }
}

Problems with this code:
	Violation of OCP: Every time you add a new shape (e.g., a Triangle), you have to modify the ShapeCalculator 
	class by adding another if-else branch. This means the class is not closed for modification.
	Fragility: Changing calculateArea risks breaking the logic for existing shapes.
	Scalability: As the number of shapes grows, the method becomes a mess of conditionals, making it harder to maintain.

Applying OCP

// Define a common interface for all shapes
public interface Shape {
    double calculateArea(); // Each shape knows how to calculate its own area
}

// Circle implements the Shape interface
public class Circle implements Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

// Rectangle implements the Shape interface
public class Rectangle implements Shape {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public double calculateArea() {
        return width * height;
    }
}

// New shape: Triangle (can be added without modifying existing code)
public class Triangle implements Shape {
    private double base;
    private double height;

    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    @Override
    public double calculateArea() {
        return 0.5 * base * height;
    }
}

// ShapeCalculator now delegates to the Shape interface
public class ShapeCalculator {
    public double calculateArea(Shape shape) {
        return shape.calculateArea(); // No need to know the specific type
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        ShapeCalculator calculator = new ShapeCalculator();
        Shape circle = new Circle(5);
        Shape rectangle = new Rectangle(4, 6);
        Shape triangle = new Triangle(3, 4);

        System.out.println("Circle Area: " + calculator.calculateArea(circle));
        System.out.println("Rectangle Area: " + calculator.calculateArea(rectangle));
        System.out.println("Triangle Area: " + calculator.calculateArea(triangle));
    }
}

How this follows OCP:
	Open for Extension: You can add new shapes (like Triangle) by creating new classes that implement the Shape interface, without touching ShapeCalculator.
	Closed for Modification: The ShapeCalculator class doesn’t need to change when new shapes are added—it relies on the Shape interface.
	Polymorphism: The calculateArea method in ShapeCalculator works with any object that implements Shape, leveraging Java’s polymorphic behavior.
Benefits of OCP
	Maintainability: Existing code remains untouched, reducing the chance of introducing bugs.
	Extensibility: Adding new functionality (e.g., a new shape) is as simple as writing a new class.
	Reusability: The Shape interface can be reused across different parts of the system.



